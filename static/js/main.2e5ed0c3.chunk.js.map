{"version":3,"sources":["components/ButtonClick.js","components/Details.js","components/EarthMap.js","containers/App.js","constants.js","actions.js","serviceWorker.js","reducers.js","index.js"],"names":["ButtonClick","onClick","text","className","Details","alt","vel","Math","round","EarthMap","srcMap","show","title","width","height","id","src","frameborder","scrolling","marginheight","marginwidth","App","this","props","onGetPosition","setInterval","latitude","longitude","requestMap","onGetMap","altitude","velocity","textButton","Component","connect","state","getPosition","isPending","error","showMyMap","dispatch","type","fetch","then","resp","json","data","catch","request","getMap","Boolean","window","location","hostname","match","initialPosition","initialRequest","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.2e5ed0c3.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ButtonClick.css';\r\n\r\n\r\nconst ButtonClick = ({ onClick, text }) => {\r\n  return (\r\n  \t<div className=\"buttonClick\">\t\r\n    \t<button onClick={onClick}>{text}</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ButtonClick;\r\n","import React from 'react';\r\nimport './Details.css';\r\n\r\nconst Details = ({ alt, vel }) => {\r\n\r\n\treturn (\r\n\t\t<div className=\"iss-details\">\r\n\t\t<p>Altitude: {Math.round(alt*100)/100} km <br />\r\n\t\tVelocity: {Math.round(vel*100)/100} km/h</p></div>\r\n\t\t);\r\n};\r\n\r\nexport default Details;\r\n\r\n\t\t\t\t  ","import React from 'react';\r\nimport './EarthMap.css';\r\nimport Details from './Details.js';\r\n\r\nconst EarthMap = ({ srcMap, show, vel, alt }) => {\r\n\r\n\treturn !show?\r\n\t\t<div></div>:\r\n\t\t(\t\r\n\t\t<div className=\"show-details\">\r\n\t\t\t<Details alt={alt} vel={vel} />\t\t\r\n\t\t\t<div className=\"mapouter\">\r\n\t\t\t\t<div className=\"gmap_canvas\">\r\n\t\t\t\t    <iframe title=\"my-map\" width=\"500\" height=\"300\" id=\"gmap_canvas\" src={srcMap}\r\n\t\t\t\t        frameborder=\"0\" scrolling=\"no\" marginheight=\"0\" marginwidth=\"0\">\r\n\t\t\t\t    </iframe>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default EarthMap;\r\n\r\n\t\t\t\t  ","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ButtonClick from '../components/ButtonClick.js';\nimport './App.css';\nimport EarthMap from '../components/EarthMap.js';\nimport { getPosition, getMap } from '../actions';\nimport {VIEW_ON_MAP, CLOSE_MAP} from '../constants.js';\n\n\n\nconst mapStateToProps = state => {\n  return {\n    latitude: state.getPosition.latitude,\n    longitude: state.getPosition.longitude,\n    altitude: state.getPosition.altitude,\n    velocity: state.getPosition.velocity,\n    isPending: state.getPosition.isPending,\n    error: state.getPosition.error, \n    requestMap: state.showMyMap.requestMap\n  }\n};\n\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonGetPosition: () => dispatch(getPosition()),\n\t\tonGetMap: (request) => dispatch(getMap(request))\n\t}\n}\n\n\nclass App extends Component  {\n\n\tcomponentDidMount() {\n\t\tthis.props.onGetPosition();\n\t\tsetInterval(()=>{this.props.onGetPosition();},10000);\n  \t}\n\n \t\n  \trender(){\n\n  \t\tconst { latitude, longitude, requestMap, onGetMap, altitude, velocity } = this.props;\n  \t\tconst  srcMap=\"https://maps.google.com/maps?q=\"+latitude+\"%2C%20\"+longitude+\"&t=k&z=1&ie=UTF8&iwloc=&output=embed\";\n  \t\tconst textButton = (requestMap) => {\n  \t\t\treturn requestMap? CLOSE_MAP: VIEW_ON_MAP};\n\n  \t\treturn (<div className=\"App\">\n\t\t\t      <h1>Where is the ISS now?</h1>\n\t\t\t      <h2>Latitude: {Math.round(latitude*100000)/100000}      Longitude: {Math.round(longitude*100000)/100000}</h2>\n          \t\t  <EarthMap srcMap={srcMap} show={requestMap} vel={velocity} alt={altitude} />\n                <ButtonClick onClick={()=>onGetMap(requestMap)} text={textButton(requestMap)} />\n\t\t    \t</div>\n\t\t       );\n\t}\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n\n\n","export const GET_POSITION = 'GET_POSITION';\r\nexport const GET_POSITION_SUCCESS = 'GET_POSITION_SUCCESS';\r\nexport const GET_POSITION_FAILED = 'GET_POSITION_FAILED';\r\nexport const SHOW_MAP= 'SHOW_MAP';\r\nexport const VIEW_ON_MAP='View details';\r\nexport const CLOSE_MAP='Close';\r\n","import { \r\n\tGET_POSITION,\r\n\tGET_POSITION_SUCCESS, \r\n\tGET_POSITION_FAILED,\r\n\tSHOW_MAP\r\n} from './constants.js';\r\n\r\n\r\n//GetPosition from API\r\n\r\nexport const getPosition = () => (dispatch) => {\r\n\tdispatch({type: GET_POSITION});\r\n\tfetch ('https://api.wheretheiss.at/v1/satellites/25544') ////http://api.open-notify.org/iss-now.json it is blocked bc of http (not s)\r\n\t.then(resp => resp.json())\r\n\t.then (data => dispatch ({type: GET_POSITION_SUCCESS, latitude: data.latitude, longitude: data.longitude, altitude: data.altitude, velocity: data.velocity}))\r\n\t.catch (error => dispatch ({type: GET_POSITION_FAILED, error: error}));\r\n};\r\n\r\n\r\n//Click Button to show/Close Map\r\n\r\nexport const getMap = (request) => ({\r\n\t\t\ttype:SHOW_MAP, \r\n\t\t\trequestMap: !request\r\n\t\t});\r\n\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { \r\n\tGET_POSITION,\r\n\tGET_POSITION_SUCCESS, \r\n\tGET_POSITION_FAILED,\r\n\tSHOW_MAP\r\n} from './constants.js';\r\n\r\n\r\n//GET POSITION\r\n\r\nconst initialPosition = {\r\n\t\r\n\tlatitude: '',\r\n\tlongitude: '',\r\n\taltitude: '',\r\n\tvelocity:'',\r\n\tisPending: true,\r\n\terror: ''\r\n};\r\n\r\n\r\nexport const getPosition = (state=initialPosition, action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase GET_POSITION:\r\n\t\t\treturn Object.assign({}, state, {isPending: true}); \r\n\t\tcase GET_POSITION_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {latitude: action.latitude, longitude: action.longitude, altitude: action.altitude, velocity: action.velocity, isPending: false}); \r\n\t\tcase GET_POSITION_FAILED:\r\n\t\t\treturn Object.assign({}, state, {error: action.error, isPending: false}); \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n\r\n//CLICK BOTON\r\n\r\nconst initialRequest = {\r\n\trequestMap: false\r\n};\r\n\r\nexport const showMyMap = (state=initialRequest, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase SHOW_MAP:\r\n\t\t\treturn Object.assign({}, state, {requestMap: action.requestMap}); \r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { getPosition, showMyMap } from './reducers.js';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({getPosition, showMyMap});\nconst store=createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n\nReactDOM.render(\n  <React.StrictMode>\n\t  <Provider store={store}>\n\t    \t<App />\n\t   </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}